name: Nightly Benchmarks

on:
  workflow_dispatch:
  schedule:
    # Run every day at midnight
    - cron: "0 0 * * *"

defaults:
  run:
    # The slightly odd shell call is to force bash to read .bashrc, which is
    # necessary for having conda behave sensibly.  We use bash as the shell even
    # on Windows, since we don't run anything complicated, and it makes
    # things much simpler.
    shell: bash -l {0}


jobs:
  benchmarks:
    name: ${{ matrix.os }}, python${{ matrix.python-version }}, ${{ matrix.case-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
        case-name: [defaults]

    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: actions-bench
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true

      - name: Install dependencies
        run: |
           conda install numpy scipy cython
           conda install pytest pytest-benchmark
           conda install pandas matplotlib
           python -m pip install pygal pygaljs

      - name: Install Qutip
        run: |
           python -m pip install git+https://github.com/qutip/qutip@dev.major

      - name: Package information
        run: |
          conda list
          python -c "import qutip; qutip.about()"

      - name: Environment information
        run: |
          uname -a
          if [[ "ubuntu-latest" == "${{ matrix.os }}" ]]; then
              hostnamectl
              lscpu
              free -h
          fi

      - name: Run benchmarks
        run: |
          python -m qutip_benchmark.cli.run_benchmarks -m nightly -v

      - name: Create artefact containing benchmarks
        uses: actions/upload-artifact@v3
        with:
          name: nightly_benchmarks
          path: .benchmarks

      - name: upload to s3
        run: |
          aws s3 sync .benchmarks s3://qutip-benchmark-data/nightly
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.QUTIP_BENCHMARK_S3_KEYID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.QUTIP_BENCHMARK_S3_SECRET }}
          AWS_EC2_METADATA_DISABLED: true

  publish:
    needs: benchmarks
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'qutip/qutip-benchmark' && github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v3

      - name: Download benchmark data from S3
        run: |
          aws s3 cp s3://qutip-benchmark-data/nightly ./.benchmarks --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.QUTIP_BENCHMARK_S3_KEYID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.QUTIP_BENCHMARK_S3_SECRET }}
          AWS_EC2_METADATA_DISABLED: true

      - name: Generate benchmark plots
        run: |
          python -m qutip_benchmark.cli.view_benchmarks --nightly --plotpath website/images/plots/nightly
          python -m qutip_benchmark.cli.view_benchmarks --scaling --plotpath website/images/plots/scaling

      - name: Build website with Jekyll
        run: |
          sudo gem install bundler jekyll
          sudo apt-get install wget subversion
          cd website

          # Download resources from qutip.github.io repository
          svn export https://github.com/qutip/qutip.github.io/trunk/css
          svn export https://github.com/qutip/qutip.github.io/trunk/_includes
          svn export https://github.com/qutip/qutip.github.io/trunk/header_source
          svn export https://github.com/qutip/qutip.github.io/trunk/images

          # build the website
          python create_index.py
          bundle install
          bundle exec jekyll build
          mv _site/* ../publish/

      - name: Publish benchmarks
        run: |
          python -m pip install ghp-import
          ghp-import -m "Automatic push by ghp-import" -f -n -p -o -r origin -b gh-pages publish
